// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }

}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;


  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);
  
    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif
  
  void main () { 
    vec2 size=vec2(2048.0,2048.0); 
    vec2 xyratio=vec2(2.41, 0.229);
    vec2 xylength=vec2(0.293, 0.97);  
    vec2 infoimgsize=vec2(1024,128);     
    float density=0.02;

    vec3 selectedColor = 1.0 - vec3(0,0.8,0.8);
    vec3 ocuppiedColor = 1.0 - vec3(0.8,0.0,0.0);

    //vec2 modified_uv = v_uv0;
    vec4 o = vec4(1, 1, 1, 1); 
    vec2 ratio = floor(size/1024.0); 
    vec2 modified_uv = vec2((xyratio.x + v_uv0.x - v_uv0.y*xyratio.x)*xylength.x,(v_uv0.y + v_uv0.x*xyratio.y)*xylength.y)*ratio;
    vec2 grid_idx = floor(modified_uv/density);
    vec2 grid_span = modified_uv - grid_idx*density; 
    vec2 is_line = vec2(step(density-0.001,grid_span.x),step(density-0.001,grid_span.y));
    o.xyz -= is_line.xxx+is_line.yyy;
    vec4 gridInfo = texture(texture,(grid_idx+0.5)/infoimgsize);
    o.xyz *= 1.0- gridInfo.r*mix(selectedColor,ocuppiedColor,gridInfo.a); 
    
 
    // if(curpos == grid_idx){
    //     o.xyz*=vec3(0,0.8,0.8);
    // }

    //o.rgb = texture(texture,grid_idx/infoimgsize).rgb;
    // int idx = int(grid_idx.y*infoimgsize.x  + grid_idx.x); 
    // o.r = grids[idx].x; 
    // o.g = grids[idx].x;
    // o.b = grids[idx].x;  
 
    ALPHA_TEST(o);   
    gl_FragColor = o;
  } 
}%
 