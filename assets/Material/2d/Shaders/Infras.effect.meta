{
  "ver": "1.0.23",
  "uuid": "ce619310-67c1-42ff-84f6-269969753846",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nvarying vec4 pos;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvarying vec2 frag_uv;\nuniform vec2 camera_ratio;\nuniform vec2 basefloor_size;\nuniform vec2 camera_size;\nuniform vec2 camera_abs_lb;\n\n#endif\n\nvoid main () {\n  pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  float ratio = camera_ratio.x;\n  vec2 abs_pos = pos.xy/2.0 + 0.5;\n  vec2 frag_global_pos = camera_abs_lb + abs_pos.xy * camera_size/ratio;\n  frag_uv = frag_global_pos/basefloor_size;\n\n  v_color = a_color;\n  \n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\nvarying vec4 pos;\n\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nvarying vec2 frag_uv;\nuniform sampler2D texture;\nuniform sampler2D global_depthtex;\nuniform sampler2D depthtex;\n#endif\n\nvoid main () {\n  vec4 texture_data = texture2D(texture, v_uv0);\n\n  gl_FragColor = texture_data;\n  vec4 depth = texture2D(depthtex,v_uv0) * 30.0;\n  vec4 global_depth = texture2D(global_depthtex,frag_uv) * 30.0;\n\n  gl_FragColor = vec4(pos.x);\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nout vec4 pos;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\nout vec2 frag_uv;\nuniform unifom_datas\n{\n  vec2 camera_ratio;\n  vec2 basefloor_size;\n\n  vec2 camera_size;\n\n  vec2 camera_abs_lb;\n\n};\n#endif\n\nvoid main () {\n  pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  float ratio = camera_ratio.x;\n  vec2 abs_pos = pos.xy/2.0 + 0.5;\n  vec2 frag_global_pos = camera_abs_lb + abs_pos.xy * camera_size/ratio;\n  frag_uv = frag_global_pos/basefloor_size;\n\n  v_color = a_color;\n  \n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\n\nin vec4 v_color;\nin vec4 pos;\n\n#if USE_TEXTURE\nin vec2 v_uv0;\nin vec2 frag_uv;\nuniform sampler2D texture;\nuniform sampler2D global_depthtex;\nuniform sampler2D depthtex;\n#endif\n\nvoid main () {\n  vec4 texture_data = texture(texture, v_uv0);\n\n  gl_FragColor = texture_data;\n  vec4 depth = texture(depthtex ,v_uv0) * 30.0;\n  vec4 global_depth = texture(global_depthtex,frag_uv) * 30.0;\n\n  gl_FragColor = vec4(pos.x);\n}\n"
      }
    }
  ],
  "subMetas": {}
}