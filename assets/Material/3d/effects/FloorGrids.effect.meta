{
  "ver": "1.0.23",
  "uuid": "673d64fc-d2a2-4f00-9fa3-1e40aa464d7c",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\n\nattribute vec2 a_uv0;\n\nvarying vec2 abs_pos;\nvarying float line_limit;\n\nuniform float line_width;\nuniform float grid_radius;\nuniform vec2 size;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  pos = cc_matViewProj * cc_matWorld * pos;\n\n  abs_pos = vec2(a_uv0.x,1.0-a_uv0.y) * size;\n  line_limit = (grid_radius-line_width)/2.0;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying float line_limit;\nvarying vec2 abs_pos;\n\nuniform sampler2D info_map;\nuniform float grid_radius;\nuniform vec2 size;\nvoid main () {\n\n  vec3 selectedColor = 1.0 - vec3(0,0.8,0.8);\n  vec3 ocuppiedColor = 1.0 - vec3(0.8,0.0,0.0);\n  vec2 grid_idx = floor(abs_pos/grid_radius);\n  vec2 grid_span = abs_pos - grid_idx * grid_radius;\n  vec2 is_line = vec2(step(line_limit,abs(grid_span.x - grid_radius/2.0)),step(line_limit,abs(grid_span.y - grid_radius/2.0)));\n  vec4 o = vec4(1, 1, 1, 1); \n  vec4 gridInfo = texture2D(info_map,(grid_idx+0.5)/size);\n  o.xyz -=  clamp(is_line.xxx + is_line.yyy,0.0,1.0)*0.5;\n  o.xyz *= 1.0- gridInfo.r*mix(selectedColor,ocuppiedColor,gridInfo.a); \n  gl_FragColor = o;\n\n} \n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\n\nin vec2 a_uv0;\n\nout vec2 abs_pos;\nout float line_limit;\n\nuniform Datas{\n  float line_width;\n  float grid_radius;\n  vec2 size;\n}\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  pos = cc_matViewProj * cc_matWorld * pos;\n\n  abs_pos = vec2(a_uv0.x,1.0-a_uv0.y) * size;\n  line_limit = (grid_radius-line_width)/2.0;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin float line_limit;\nin vec2 abs_pos;\n\nuniform sampler2D info_map;\nuniform Datas{\n  float line_width;\n  float grid_radius;\n  vec2 size;\n}\n\nvoid main () {\n\n  vec3 selectedColor = 1.0 - vec3(0,0.8,0.8);\n  vec3 ocuppiedColor = 1.0 - vec3(0.8,0.0,0.0);\n  vec2 grid_idx = floor(abs_pos/grid_radius);\n  vec2 grid_span = abs_pos - grid_idx * grid_radius;\n  vec2 is_line = vec2(step(line_limit,abs(grid_span.x - grid_radius/2.0)),step(line_limit,abs(grid_span.y - grid_radius/2.0)));\n  vec4 o = vec4(1, 1, 1, 1); \n  vec4 gridInfo = texture(info_map,(grid_idx+0.5)/size);\n  o.xyz -=  clamp(is_line.xxx + is_line.yyy,0.0,1.0)*0.5;\n  o.xyz *= 1.0- gridInfo.r*mix(selectedColor,ocuppiedColor,gridInfo.a); \n  gl_FragColor = o;\n\n} \n"
      }
    }
  ],
  "subMetas": {}
}